'use strict';
const chalk = require('chalk');
const xml2js = require('xml2js');

/**
 * @classdesc An object representation of XML sitemaps and methods for editing them.
 *
 * @class XmlSitemap
 */
class XmlSitemap {
  /**
   * Create a new sitemap or create a sitemap object from an XML string.
   * @param {String|Buffer} [xmlAsString] - Optional, the sitemap XML as a string or Buffer. Must be a valid sitemap.
   * @example
   * See Basic Usage above
   */
  constructor(xmlAsString) {
    let xmlObj;
    let urls;
    if (typeof xmlAsString === 'string' || xmlAsString instanceof Buffer) {
      xmlObj = parseXml(xmlAsString);
      try {
        urls = xmlObj.urlset.url.map(url => url.loc[0]);
      } catch (err) {
        throw new Error('Sitemap has no urlset.');
      }
    } else {
      const urlset = {
        $: {
          xmlns: 'http://www.sitemaps.org/schemas/sitemap/0.9'
          // 'xmlns:image': 'http://www.google.com/schemas/sitemap-image/1.1',
          // 'xmlns:video': 'http://www.google.com/schemas/sitemap-video/1.1'
        }
      };
      xmlObj = {urlset};
      urls = [];
    }
    /**
     * XML object tree of sitemap, as generated by [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js). Automarically created and udated as the sitemap is modified.
     * @type {Object}
     * @example
     * {
     *   urlset: {
     *     '$': { xmlns: 'http://www.sitemaps.org/schemas/sitemap/0.9' },
     *     url: [
     *       { loc: 'http://domain.com/',
     *          lastmod: '1985-12-25',
     *          priority: '0.9' },
     *       { loc: 'http://domain.com/magic',
     *          lastmod: '2012-12-21',
     *          changefreq: 'never' }
     *     ]
     *   }
     * }
     */
    this.xmlObj = xmlObj;
    /**
     * Array of urls in the sitemap. Add urls by using {@link XmlSitemap#addUrl}.
     * @type {String[]}
     * @example
     * var sitemap = new XmlSitemap()
     *   .addUrl('http://domain.com/')
     *   .addUrl('http://domain.com/magic');
     *
     * console.log(sitemap.urls);
     * // [ 'http://domain.com/', 'http://domain.com/magic' ]
     */
    this.urls = urls;
    /**
     * Allowable option tags for urls in sitemap. Add options with or without handlers by using {@link XmlSitemap#addOption}.
     * @type {String[]}
     * @default ['lastmod', 'changefreq', 'priority']
     * @example
     * var sitemap = new XmlSitemap();
     *
     * console.log(sitemap.urlOptions);
     * // [ 'lastmod', 'changefreq', 'priority' ]
     *
     * sitemap.addOption('foo');
     * console.log(sitemap.urlOptions);
     * // [ 'lastmod', 'changefreq', 'priority', 'foo' ]
     *
     */
    this.urlOptions = ['lastmod', 'changefreq', 'priority'];
    /**
     * Optional handlers for custom option settings. Handler functions are listed under the option name key. Add options with {@link XmlSitemap#addOption}.
     * @type {Object}
     * @default
     * {
     *   lastmod: XmlSitemap.handleLastmod,
     *   changefreq: XmlSitemap.handleChangefreq,
     *   priority: XmlSitemap.handlePriority
     * }
     */
    this.optionHandlers = {
      lastmod: XmlSitemap.handleLastmod,
      changefreq: XmlSitemap.handleChangefreq,
      priority: XmlSitemap.handlePriority
    };
  }

  /**
   * Output the sitemap as XML.
   * @return {String} The sitemap XML
   */
  get xml() {
    const builder = new xml2js.Builder({xmldec: {version: '1.0', encoding: 'UTF-8'}});
    return builder.buildObject(this.xmlObj);
  }

  // STATIC METHODS
  /**
   * Format a Date object to W3 standard string.
   * @param {Date} date - the Date to format
   * @throws {TypeError} Argument must be Date object
   * @return {String} Date formatted as year-month-day
   * @example
   * var date = new Date();
   * date.setFullYear(2012);
   * date.setMonth(11);
   * date.setDate(21);
   *
   * XmlSitemap.w3Date(date); // '2012-12-21'
   */
  static w3Date(date) {
    if (!(date instanceof Date)) {
      throw new TypeError(`XmlSitemap.w3Date expects a Date object, found ${date.constructor}.`);
    }
    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
  }

  /**
   * Determine what to put in the lastmod field given the input. Will NOT check format of string.
   * @param {String|Date} [date] - The lastmod value as a Date object, the string 'now', or a string (will not confirm format)
   * @return {String} The value of lastmod
   */
  static handleLastmod(date) {
    let out = date;
    if (typeof date === 'undefined' || date === 'now' || date === null) {
      out = XmlSitemap.w3Date(new Date());
    } else if (date instanceof Date) {
      out = XmlSitemap.w3Date(date);
    } else if (typeof date !== 'string') {
      throw new TypeError(`Expected lastmod value to be a Date or string, found ${typeof date}.`);
    }
    return out;
  }

  /**
   * Check if changfreq value is valid.
   * @param {String} value - The changefreq value to check
   * @throws {Error} The changefreq must be valid. Allowed values are "always", "hourly", "daily", "weekly", "monthly", "yearly", "never".
   * @return {String} A valid changefreq value
   */
  static handleChangefreq(value) {
    const allowedValues = ['always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'];
    if (allowedValues.indexOf(value) < 0) {
      throw new Error(`Unrecognized changfreq value ${value}`);
    }
    return value;
  }

  /**
   * Check for valid priority value and return it as a string. Priority must be between 0 and 1.
   * @param {Double} value - The Priority value
   * @throws {Error} Priority must be number between 0 & 1, inclusive.
   * @return {String} The priority value as a string
   */
  static handlePriority(value) {
    if (value < 0 || value > 1 || typeof value !== 'number') {
      throw new Error(`Priority must be number between 0 and 1, found ${value}`);
    }
    return value.toString();
  }

  // UTILITY FUNCTIONS
  /**
   * Check if sitemap contains a url.
   * @param {String} url - The url to look for
   * @return {Bool} Whether the url is in the sitemap
   * @example
   * var sitemap = new XmlSitemap()
   *   .addUrl('http://domain.com/');
   *
   * sitemap.hasUrl('http://domain.com/'); // true
   * sitemap.hasUrl('http://otherdomain.com/'); // false
   */
  hasUrl(url) {
    return this.urls.indexOf(url) >= 0;
  }

  /**
   * Get node of the XML object tree for a url.
   * @param {String} url - The url of the desired XML node
   * @return {Object} The XML element of the url
   * @example
   * var sitemap = new XmlSitemap()
   *   .addUrl('http://domain.com/', {lastmod: '2012-12-21', changefreq: 'never'});
   *
   * sitemap.getUrlNode('http://domain.com/');
   * // { loc: 'http://domain.com/',
   * // lastmod: '2012-12-21',
   * // changefreq: 'never' }
   *
   */
  getUrlNode(url) {
    if (!this.hasUrl(url)) {
      throw new Error(url + ' not in sitemap, can\'t get node.');
    }

    const index = this.urls.indexOf(url);
    return this.xmlObj.urlset.url[index];
  }

  /**
   * Determine if and how to set an options given it's value. Will process option through handler if set in {@link XmlSitemap#optionHandlers}. Add options with {@link XmlSitemap#addOption}.
   * @param {String} option -The name of the option
   * @param {*} value - The object from which to derive the XML value
   * @throws {Error} Unavailable options throw an error
   * @return {String|null} How the option will appear in the XML
   */
  handleOption(option, value) {
    if (value === null) {
      return null;
    }
    let out;
    if (this.urlOptions.indexOf(option) >= 0) {
      if (typeof this.optionHandlers[option] === 'function') {
        out = this.optionHandlers[option](value);
      } else {
        out = value;
      }
    } else {
      throw new Error(`Unrecognized option ${option}. Expected one of ${this.urlOptions.join(', ')}.`);
    }
    return out;
  }

  /**
   * Add a custom option tag to the allowed url tags. Adds the option and handler to {@link XmlSitemap#urlOptions} and {@link XmlSitemap#optionHandlers}.
   * @param {String} optionName - The name of the option
   * @param {Function} [handler] - An optional function to process option values for XML representation. Must return string.
   * @param {Bool} [overwrite=false] Acknowledge that you are overwriting the option if it already exists. This will remove all instances of the option in the sitemap.
   * @throws {Error} Cannot add options that already exist without setting overwrite to true. They must be removed with {@link XmlSitemap#removeOption}.
   * @return {XmlSitemap} The updated sitemap
   * @example
   * var sitemap = new XmlSitemap()
   * .addUrl('http://domain.com.');
   *
   * // before adding option
   * sitemap.setOptionValue('http://domain.com/', 'foo', 'bar');
   * // Error: Unrecognized option foo. Expected one of lastmod, changefreq, priority.
   *
   * // adding option without handler
   * sitemap.addOption('foo');
   * sitemap.setOptionValue('http://domain.com/', 'foo', 'bar');
   *
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //  <url>
   * //    <loc>http://domain.com/</loc>
   * //    <foo>bar</foo>
   * //  </url>
   * // </urlset>
   *
   * // adding option with handler
   * sitemap.addOption('foo', function(str) {return str.toUpperCase();});
   * // Error: Option 'foo' already exists.
   *
   * // using overwrite
   * sitemap.addOption('foo', function(str) {return str.toUpperCase();}, true);
   * sitemap.setOptionValue('http://domain.com/', 'foo', 'bar');
   *
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //     <foo>BAR</foo>
   * //   </url>
   * // </urlset>
   */
  addOption(optionName, handler, overwrite) {
    if (typeof optionName !== 'string') {
      throw new TypeError('optionName must be a string.');
    }
    if (this.urlOptions.indexOf(optionName) >= 0) {
      if (overwrite === true || handler === true) {
        this.removeOption(optionName);
      } else {
        throw new Error(`Option '${optionName}' already exists. Set overwrite to true or call removeOption first.'`);
      }
    }
    this.urlOptions.push(optionName);
    if (typeof handler === 'function') {
      this.optionHandlers[optionName] = handler;
    }
    return this;
  }

  /**
   * Remove an existing available option. Removes its handler if applicable and **removes all instances of it in the sitemap's urls**.
   * @param  {String} optionName - The option to remove
   * @return {XmlSitemap} - The updated sitemap
   * @example
   * var sitemap = new XmlSitemap()
   *   .addOption('foo')
   *   .addUrl('http://domain.com/', {'foo': 'bar'});
   *
   * // BEFORE
   * console.log(sitemap.urlOptions); // [ 'lastmod', 'changefreq', 'priority', 'foo' ]
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //     <foo>bar</foo>
   * //   </url>
   * // </urlset>
   *
   * sitemap.removeOption('foo');
   *
   * // AFTER
   * console.log(sitemap.urlOptions); // [ 'lastmod', 'changefreq', 'priority' ]
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //   </url>
   * // </urlset>
   */
  removeOption(optionName) {
    const index = this.urlOptions.indexOf(optionName);
    if (index < 0) {
      return this;
    }
    delete this.optionHandlers[optionName];
    this.urlOptions.splice(index, 1);

    this.urls.forEach(url => {
      const urlNode = this.getUrlNode(url);
      if (typeof urlNode[optionName] !== 'undefined') {
        delete urlNode[optionName];
      }
    });

    return this;
  }

  /**
  * Create a url node XML object
  * @param {String} url - The url to add
  * @param {Object} [options] - Options for setting various information about the url, must be one of {@link XmlSitemap#urlOptions}. Add options with {@link XmlSitemap#addOption}.
  * @return {Object} The url XML node
  */
  buildUrlNode(url, options) {
    const self = this;
    if (typeof url !== 'string') {
      throw new TypeError('Expected url to be string.');
    }
    const urlNode = {
      loc: url
    };

    if (typeof options === 'object') {
      Object.keys(options).forEach(opt => {
        urlNode[opt] = self.handleOption(opt, options[opt]);
      });
    }
    return urlNode;
  }

  // FUNCTIONS FOR MODIFYING SITEMAP
  /**
   * Add url to sitemap
   * @param {String} url - The url to add
   * @param {Object} [options] - Options for setting various information about the url. Options must be in the objects {@link XmlSitemap#urlOptions}.
   * @return {XmlSitemap} The sitemap object
   * @example
   * var sitemap = new XmlSitemap();
   *
   * sitemap.addUrl('http://domain.com/').
   *        .addUrl('http://domain.com/other', {lastmod: '2012-11-21'});
   *
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //   </url>
   * //   <url>
   * //     <loc>http://domain.com/other</loc>
   * //     <lastmod>2012-12-21</lastmod>
   * //   </url>
   * // </urlset>
   */
  addUrl(url, options) {
    if (this.hasUrl(url)) {
      throw new Error(url + ' is already in tree. To update options use the setOptionValue or setOptionValues methods.');
    }
    this.urls.push(url);
    const urlNode = this.buildUrlNode(url, options);

    if (this.xmlObj.urlset.url instanceof Array) {
      this.xmlObj.urlset.url.push(urlNode);
    } else {
      this.xmlObj.urlset.url = [urlNode];
    }

    return this;
  }

  /**
   * Remove url from the Sitemap
   * @param {String} url - The url to remove
   * @return {XmlSitemap} The sitemap object
   * @example
   * var sitemap = new XmlSitemap()
   *   .addUrl('http://domain.com/')
   *   .addUrl('http://domain.com/other');
   *
   * // BEFORE
   * console.log(sitemap.urls); // ['http://domain.com/', 'http://domain.com/other']
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //   </url>
   * //   <url>
   * //     <loc>http://domain.com/other</loc>
   * //   </url>
   * // </urlset>
   *
   * sitemap.removeUrl('http://domain.com/other');
   *
   * // AFTER
   * console.log(sitemap.urls); // ['http://domain.com/']
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //   </url>
   * // </urlset>
   */
  removeUrl(url) {
    const index = this.urls.indexOf(url);
    if (index === -1) {
      console.log(chalk.yellow(url, 'is not in sitemap.'));
      return;
    }

    this.xmlObj.urlset.url.splice(index, 1);
    this.urls.splice(index, 1);
    return this;
  }

  /**
   * Update when a url was last modified. Also accepts `updateLastMod`. For updating other options use updateUrl.
   * @param {String} url - Url in Sitemap to update
   * @param {String|Date} [date=today] - Date to update the lastmod value to.
   * @return {XmlSitemap} The sitemap object
   * @example
   * var url = 'http://domain.com/'
   * var sitemap = new XmlSitemap()
   *   .addUrl(url);
   *
   * sitemap.getOptionValue(url, 'lastmod'); // null
   *
   * // no date
   * sitemap.updateLastmod(url);
   * sitemap.getOptionValue(url, 'lastmod'); // {today's date}
   *
   * // string date
   * sitemap.updateLastmod(url, '2012-12-21');
   * sitemap.getOptionValue(url, 'lastmod'); // '2012-12-21'
   *
   * // 'now'
   * sitemap.updateLastmod(url, 'now');
   * sitemap.getOptionValue(url, 'lastmod'); // {today's date}
   *
   * // Date object
   * var date = new Date();
   * date.setFullYear(2012);
   * date.setMonth(11);
   * date.setDate(21);
   * sitemap.updateLastmod(url, date);
   * sitemap.getOptionValue(url, 'lastmod'); // '2012-12-21'
   *
   */
  updateLastmod(url, date) {
    if (!this.hasUrl(url)) {
      console.log(chalk.yellow(url, 'not in sitemap, can\'t update lastmod.'));
      return this;
    }
    date = date === null ? new Date() : date;

    const urlNode = this.getUrlNode(url);
    urlNode.lastmod = this.handleOption('lastmod', date);
    return this;
  }
  /** @alias updateLastmod */
  updateLastMod(url, date) {
    return this.updateLastmod(url, date);
  }

  /**
   * Set an option on a url node. Set multiple options using {@link XmlSitemap#updateUrl}. To remove an option, set its value to null or use {@link XmlSitemap#removeOptionValue}.
   * @param {string} url - Url in Sitemap to update
   * @param {string} option - The name of the option
   * @param {*} value - The object from which to derive the XML value
   * @example
   * var sitemap = new XmlSitemap()
   *   .addUrl('http://domain.com/');
   * sitemap.setOptionValue('http://domain.com/', 'priority', 0.3);
   *
   * console.log(sitemap.xml);
   * // <?xml version="1.0" encoding="UTF-8"?>
   * // <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
   * //   <url>
   * //     <loc>http://domain.com/</loc>
   * //     <priority>0.3</priority>
   * //   </url>
   * // </urlset>
   * @return {XmlSitemap} The updated XmlSitemap
   */
  setOptionValue(url, option, value) {
    value = this.handleOption(option, value);
    if (!this.hasUrl(url)) {
      console.log(chalk.yellow(url, `not in sitemap, can't update its ${option}.`));
      return this;
    }
    const urlNode = this.getUrlNode(url);
    if (value === null) {
      delete urlNode[option];
    } else {
      urlNode[option] = value;
    }

    return this;
  }

  /**
  * Update a url's options. Options must be in the sitemap's allowable {@link XmlSitemap#urlOptions}. Not to be confused with {@link XmlSitemap#setOptionValue} To remove an existing option, set its value to null.
  * @param {String} url - The url to add
  * @param {Object} options - Options for setting various information about the url
  * @throws {Error} Options object is required
  * @return {XmlSitemap} The updated sitemap object
  * @example
  * var url = 'http://domain.com/'
  * var sitemap = new XmlSitemap()
  * .addUrl(url, {lastmod:'1900-10-31', priority: 0.7});
  *
  * sitemap.getOptionValue(url, 'lastmod'); // '1900-10-31'
  * sitemap.getOptionValue(url, 'priority'); // '0.7'
  * sitemap.getOptionValue(url, 'changefreq'); // null
  *
  * sitemap.setOptionValues(url, {priority: 0.8, changefreq: 'weekly'});
  *
  * sitemap.getOptionValue(url, 'lastmod'); // '1900-10-31'
  * sitemap.getOptionValue(url, 'priority'); // '0.8'
  * sitemap.getOptionValue(url, 'changefreq'); // 'weekly'
  */
  setOptionValues(url, options) {
    const self = this;
    if (typeof options !== 'object') {
      throw new Error('Options object required for setOptionValues.');
    }
    const urlNode = self.getUrlNode(url);
    Object.keys(options).forEach(opt => {
      const value = self.handleOption(opt, options[opt]);
      if (value === null) {
        delete urlNode[opt];
      } else {
        urlNode[opt] = value;
      }
    });
    return this;
  }

  /**
   * Get an option value from the XML object tree's url. Valid options that are unset return null. Invalid options or requesting options for urls not in the sitemap throw errors.
   *
   * @param  {String} url - The url to get the option for
   * @param  {String} option - The desired option
   * @throws {Error} Url must be in sitemap
   * @throws {Error} Option must be valid, add options with {@link XmlSitemap#addOption}
   * @return {String|null} The option value or null if option not assigned or url isn't in tree.
   * @example
   * var sitemap = new XmlSitemap()
   * .addUrl('http://domain.com/', {priority: 0.7});
   *
   * sitemap.getOptionValue('http://domain.com/', 'priority'); // '0.7'
   * sitemap.getOptionValue('http://domain.com/', 'lastmod'); // null
   * sitemap.getOptionValue('http://notreal.com/', 'lastmod'); // throws error
   */
  getOptionValue(url, option) {
    if (!this.hasUrl(url)) {
      throw new Error(`${url} not in sitemap, can't get value.`);
    }
    if (this.urlOptions.indexOf(option) < 0) {
      throw new Error(`Option ${option} is not valid. To add options, use addOption.`);
    }
    const urlNode = this.getUrlNode(url);
    if (typeof urlNode[option] !== 'undefined') {
      return urlNode[option];
    }
    return null;
  }
}

// MISC
// Removing the callback syntax of xml2js
// from https://github.com/Leonidas-from-XIV/node-xml2js/issues/159
function parseXml(xml) {
  let error = null;
  let json = null;
  xml2js.parseString(xml, (innerError, innerJson) => {
    error = innerError;
    json = innerJson;
  });

  if (error) {
    throw error;
  }

  if (!error && !json) {
    throw new Error('xml2js is async now. Alert the powers at be!');
  }
  return json;
}

/**
@module XmlSitemap
*/
module.exports = XmlSitemap;
